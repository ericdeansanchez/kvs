Project spec 0

The cargo project, kvs, builds a command-line key-value store client called kvs, which in turn calls into a library called kvs.

The kvs executable supports the following command line arguments:

    kvs set <KEY> <VALUE>

    Set the value of a string key to a string

    kvs get <KEY>

    Get the string value of a given string key

    kvs rm <KEY>

    Remove a given key

    kvs -V

    Print the version

The kvs library contains a type, KvStore, that supports the following methods:

    KvStore::set(&mut self, key: String, value: String)

    Set the value of a string key to a string

    KvStore::get(&mut self, key: String) -> Option<String>

    Get the string value of the a string key. If the key does not exist, return None.

    KvStore::remove(&mut self, key: String)

    Remove a given key.

The KvStore type stores values in-memory, and thus the command-line client can
do little more than print the version. 

The get/ set / rm commands will return an "unimplemented" error when run from 
the command line. Future projects will store values on disk and have a working
command line interface.

Project spec 1

The cargo project, kvs, builds a command-line key-value store client called kvs, which in turn calls into a library called kvs.

The kvs executable supports the following command line arguments:

    kvs set <KEY> <VALUE>

    Set the value of a string key to a string. Print an error and return a non-zero exit code on failure.

    kvs get <KEY>

    Get the string value of a given string key. Print an error and return a non-zero exit code on failure.

    kvs rm <KEY>

    Remove a given key. Print an error and return a non-zero exit code on failure.

    kvs -V

    Print the version

The kvs library contains a type, KvStore, that supports the following methods:

    KvStore::set(&mut self, key: String, value: String) -> Result<()>

    Set the value of a string key to a string. Return an error if the value is not written successfully.

    KvStore::get(&mut self, key: String) -> Result<Option<String>>

    Get the string value of a string key. If the key does not exist, return None. Return an error if the value is not read successfully.

    KvStore::remove(&mut self, key: String) -> Result<()>

    Remove a given key. Return an error if the key does not exist or is not removed successfully.

When setting a key to a value, kvs writes the set command to disk in a sequential 
log, then stores the log pointer (file offset) of that command in the in-memory index
from key to pointer. When removing a key, similarly, kvs writes the rm command in the
log, then removes the key from the in-memory index. When retrieving a value for a key
with the get command, it searches the index, and if found then loads from the log the
command at the corresponding log pointer, evaluates the command and returns the result.

On startup, the commands in the log are traversed from oldest to newest, and the in-memory index rebuilt.

When the size of the uncompacted log entries reach a given threshold, kvs compacts it
into a new log, removing redundent entries to reclaim disk space.

Note that our kvs project is both a stateless command-line program, and a library
containing a stateful KvStore type: for CLI use the KvStore type will load the index,
execute the command, then exit; for library use it will load the index, then execute
multiple commands, maintaining the index state, until it is dropped.